// Generated by gencpp from file radar_msgs/radar.msg
// DO NOT EDIT!


#ifndef RADAR_MSGS_MESSAGE_RADAR_H
#define RADAR_MSGS_MESSAGE_RADAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace radar_msgs
{
template <class ContainerAllocator>
struct radar_
{
  typedef radar_<ContainerAllocator> Type;

  radar_()
    : n(0)
    , r(0.0)
    , phi(0.0)  {
    }
  radar_(const ContainerAllocator& _alloc)
    : n(0)
    , r(0.0)
    , phi(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _n_type;
  _n_type n;

   typedef float _r_type;
  _r_type r;

   typedef float _phi_type;
  _phi_type phi;





  typedef boost::shared_ptr< ::radar_msgs::radar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_msgs::radar_<ContainerAllocator> const> ConstPtr;

}; // struct radar_

typedef ::radar_msgs::radar_<std::allocator<void> > radar;

typedef boost::shared_ptr< ::radar_msgs::radar > radarPtr;
typedef boost::shared_ptr< ::radar_msgs::radar const> radarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_msgs::radar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_msgs::radar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_msgs::radar_<ContainerAllocator1> & lhs, const ::radar_msgs::radar_<ContainerAllocator2> & rhs)
{
  return lhs.n == rhs.n &&
    lhs.r == rhs.r &&
    lhs.phi == rhs.phi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_msgs::radar_<ContainerAllocator1> & lhs, const ::radar_msgs::radar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::radar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::radar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::radar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::radar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::radar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::radar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_msgs::radar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3a8cc87ce2d38b8fa7a080b864bbe8e";
  }

  static const char* value(const ::radar_msgs::radar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3a8cc87ce2d38b8ULL;
  static const uint64_t static_value2 = 0xfa7a080b864bbe8eULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_msgs::radar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_msgs/radar";
  }

  static const char* value(const ::radar_msgs::radar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_msgs::radar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 n\n"
"float32 r\n"
"float32 phi\n"
;
  }

  static const char* value(const ::radar_msgs::radar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_msgs::radar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n);
      stream.next(m.r);
      stream.next(m.phi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_msgs::radar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_msgs::radar_<ContainerAllocator>& v)
  {
    s << indent << "n: ";
    Printer<int8_t>::stream(s, indent + "  ", v.n);
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_MSGS_MESSAGE_RADAR_H

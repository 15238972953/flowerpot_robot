// Generated by gencpp from file yolo11_pkg/array.msg
// DO NOT EDIT!


#ifndef YOLO11_PKG_MESSAGE_ARRAY_H
#define YOLO11_PKG_MESSAGE_ARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yolo11_pkg/coordinate.h>

namespace yolo11_pkg
{
template <class ContainerAllocator>
struct array_
{
  typedef array_<ContainerAllocator> Type;

  array_()
    : array()  {
    }
  array_(const ContainerAllocator& _alloc)
    : array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::yolo11_pkg::coordinate_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::yolo11_pkg::coordinate_<ContainerAllocator> >> _array_type;
  _array_type array;





  typedef boost::shared_ptr< ::yolo11_pkg::array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolo11_pkg::array_<ContainerAllocator> const> ConstPtr;

}; // struct array_

typedef ::yolo11_pkg::array_<std::allocator<void> > array;

typedef boost::shared_ptr< ::yolo11_pkg::array > arrayPtr;
typedef boost::shared_ptr< ::yolo11_pkg::array const> arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolo11_pkg::array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolo11_pkg::array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolo11_pkg::array_<ContainerAllocator1> & lhs, const ::yolo11_pkg::array_<ContainerAllocator2> & rhs)
{
  return lhs.array == rhs.array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolo11_pkg::array_<ContainerAllocator1> & lhs, const ::yolo11_pkg::array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolo11_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolo11_pkg::array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo11_pkg::array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo11_pkg::array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo11_pkg::array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo11_pkg::array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo11_pkg::array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolo11_pkg::array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a32149513fa1aa3cce229c0f0ef79c6";
  }

  static const char* value(const ::yolo11_pkg::array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a32149513fa1aa3ULL;
  static const uint64_t static_value2 = 0xcce229c0f0ef79c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolo11_pkg::array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo11_pkg/array";
  }

  static const char* value(const ::yolo11_pkg::array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolo11_pkg::array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinate[] array\n"
"================================================================================\n"
"MSG: yolo11_pkg/coordinate\n"
"int16 x\n"
"int16 y\n"
;
  }

  static const char* value(const ::yolo11_pkg::array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolo11_pkg::array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolo11_pkg::array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolo11_pkg::array_<ContainerAllocator>& v)
  {
    s << indent << "array[]" << std::endl;
    for (size_t i = 0; i < v.array.size(); ++i)
    {
      s << indent << "  array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::yolo11_pkg::coordinate_<ContainerAllocator> >::stream(s, indent + "    ", v.array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLO11_PKG_MESSAGE_ARRAY_H

#!/usr/bin/env python3

import time
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN

inf = 101.0

limit = 1

laser_data = [inf, 0.257999986410141, 0.24500000476837158, 0.2549999952316284, 0.25200000405311584, 0.24799999594688416, 0.25, 0.2540000081062317, 0.2549999952316284, 0.25600001215934753, 0.257999986410141, 0.24699999392032623, 0.2529999911785126, 0.2540000081062317, 0.25200000405311584, 0.2409999966621399, 0.25200000405311584, 0.2460000067949295, 0.24500000476837158, 0.25099998712539673, 0.24400000274181366, 0.2460000067949295, 0.24199999868869781, 0.26100000739097595, 0.24699999392032623, 0.2639999985694885, 0.25699999928474426, 0.25999999046325684, 0.25, 0.24699999392032623, 0.25699999928474426, 0.25200000405311584, 0.25, 0.257999986410141, 0.26499998569488525, 0.2549999952316284, 0.26100000739097595, 0.25999999046325684, 0.24899999797344208, 0.2540000081062317, 0.26100000739097595, 0.25600001215934753, 0.2529999911785126, 0.2549999952316284, 0.26100000739097595, 0.25600001215934753, 0.2669999897480011, 0.26899999380111694, 0.2809999883174896, 0.2639999985694885, inf, 0.257999986410141, 0.26600000262260437, 0.25600001215934753, 0.26899999380111694, 0.26899999380111694, 0.2669999897480011, 0.2720000147819519, 0.28200000524520874, 0.27399998903274536, 0.2680000066757202, 0.27300000190734863, 0.2750000059604645, 0.2669999897480011, 0.2800000011920929, 0.27399998903274536, 0.27900001406669617, 0.27900001406669617, 0.289000004529953, 0.27399998903274536, 0.29499998688697815, 0.2879999876022339, 0.29499998688697815, 0.2980000078678131, 0.28999999165534973, 0.29600000381469727, inf, inf, 0.6759999990463257, 0.6539999842643738, inf, inf, 2.1059999465942383, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.5269999504089355, 1.5010000467300415, 1.50600004196167, 1.4880000352859497, 1.5, 1.5010000467300415, 1.503000020980835, 1.5010000467300415, 1.503999948501587, inf, inf, 1.753000020980835, 1.7580000162124634, 1.7680000066757202, 1.7669999599456787, 1.7580000162124634, 1.7640000581741333, 1.7690000534057617, 1.777999997138977, 1.7799999713897705, 1.781999945640564, 1.7860000133514404, 1.7979999780654907, inf, inf, 2.046999931335449, inf, 1.9170000553131104, 1.9049999713897705, inf, 2.0209999084472656, 2.0490000247955322, 2.059000015258789, 2.059000015258789, 2.065999984741211, 2.062999963760376, 2.059999942779541, 2.072000026702881, 2.0739998817443848, 2.075000047683716, 2.075000047683716, inf, inf, 1.5010000467300415, 1.4869999885559082, 1.4880000352859497, inf, 2.0869998931884766, 2.0989999771118164, 2.0969998836517334, 2.0989999771118164, 2.1110000610351562, 2.109999895095825, 2.111999988555908, 2.121000051498413, 2.122999906539917, 2.119999885559082, 2.121000051498413, 2.121999979019165, 2.135999917984009, 2.131999969482422, 2.13700008392334, 2.1470000743865967, 2.1480000019073486, 2.1429998874664307, 2.1449999809265137, 2.1589999198913574, inf, inf, 2.0139999389648438, 2.01200008392334, inf, 2.1670000553131104, inf, 2.1110000610351562, 2.0910000801086426, 2.068000078201294, inf, inf, 0.9570000171661377, 0.9419999718666077, 0.9340000152587891, 0.9269999861717224, 0.9210000038146973, 0.9079999923706055, 0.8989999890327454, 0.9110000133514404, 0.8899999856948853, 0.890999972820282, 0.890999972820282, 0.8880000114440918, 0.8820000290870667, 0.8799999952316284, 0.8880000114440918, 0.878000020980835, 0.871999979019165, 0.8759999871253967, 0.8690000176429749, 0.8690000176429749, 0.875, 0.8730000257492065, 0.8690000176429749, 0.8690000176429749, 0.8629999756813049, 0.8579999804496765, 0.871999979019165, 0.8690000176429749, 0.8679999709129333, 0.8669999837875366, 0.8740000128746033, 0.8709999918937683, 0.8650000095367432, 0.8659999966621399, 0.8700000047683716, 0.8700000047683716, 0.8709999918937683, 0.8679999709129333, 0.8790000081062317, 0.871999979019165, 0.8700000047683716, 0.8820000290870667, 0.8799999952316284, 0.8870000243186951, inf, 0.8899999856948853, 0.8849999904632568, 0.9010000228881836, 0.8939999938011169, 0.902999997138977, 0.9079999923706055, 0.9089999794960022, 0.9139999747276306, 0.925000011920929, 0.9319999814033508, inf, inf, inf, 1.9559999704360962, 1.9850000143051147, 1.972000002861023, 1.9600000381469727, 1.9520000219345093, 1.940999984741211, 1.9299999475479126, 1.9270000457763672, 1.930999994277954, 1.9420000314712524, 1.9509999752044678, inf, inf, 2.634999990463257, inf, inf, 2.003000020980835, 1.9980000257492065, 2.002000093460083, 2.005000114440918, 1.9980000257492065, 2.009999990463257, inf, inf, inf, inf, inf, inf, inf, 2.803999900817871, 2.813999891281128, 2.7769999504089355, inf, inf, inf, 1.0789999961853027, 1.069000005722046, 1.065999984741211, 1.0640000104904175, 1.062999963760376, 1.0700000524520874, 1.065000057220459, inf, inf, inf, inf, inf, inf, 0.7630000114440918, 0.7620000243186951, 0.7590000033378601, 0.7540000081062317, 0.7570000290870667, 0.7549999952316284, 0.753000020980835, 0.7620000243186951, 0.7580000162124634, 0.7649999856948853, 0.7680000066757202, inf, inf, inf, inf, inf, inf, inf, 2.6559998989105225, 2.6689999103546143, 2.6570000648498535, 2.671999931335449, 2.6659998893737793, 2.6630001068115234, inf, 2.61299991607666, 2.6070001125335693, 2.6089999675750732, 2.5869998931884766, inf, inf, inf, inf, inf, inf, 2.1630001068115234, 2.1549999713897705, 2.1589999198913574, 2.1530001163482666, inf, inf, 2.489000082015991, 2.494999885559082, 2.4769999980926514, 2.4779999256134033, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 0.902999997138977, 0.9049999713897705, 0.9419999718666077, inf, 0.9470000267028809, 0.9670000076293945, 0.9789999723434448, 0.996999979019165, 1.003999948501587, 1.0149999856948853, 1.0099999904632568, 1.0190000534057617, 1.0230000019073486, 1.024999976158142, 1.031000018119812, 1.031999945640564, 1.0290000438690186, 1.0360000133514404, 1.0390000343322754, 1.031999945640564, inf, inf, 1.1390000581741333, 1.1390000581741333, 1.149999976158142, 1.1410000324249268, 1.1399999856948853, 1.1390000581741333, 1.1390000581741333, inf, inf, 1.3259999752044678, 1.3250000476837158, 1.315000057220459, 1.3040000200271606, 1.284000039100647, 1.284000039100647, inf, 1.246999979019165, 1.2289999723434448, 1.2230000495910645, inf, 1.2419999837875366, 1.2380000352859497, 1.2480000257492065, 1.2519999742507935, 1.2369999885559082, 1.2680000066757202, 1.253000020980835, 1.2790000438690186, 1.281000018119812, 1.2790000438690186, 1.2549999952316284, 1.2799999713897705, 1.2890000343322754, 1.2949999570846558, 1.3179999589920044, 1.277999997138977, 1.2879999876022339, 1.309000015258789, 1.3220000267028809, 1.2940000295639038, 1.2920000553131104, 1.309000015258789, 1.2999999523162842, 1.3359999656677246, inf, 1.340000033378601, 1.3450000286102295, 1.3350000381469727, 1.3309999704360962, 1.350000023841858, 1.3459999561309814, 1.3609999418258667, 1.3600000143051147, 1.347000002861023, 1.378999948501587, 1.3589999675750732, 1.3370000123977661, inf, 1.406999945640564, 1.4119999408721924, 1.409999966621399, inf, 1.3830000162124634, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.4229999780654907, 1.4259999990463257, 1.4240000247955322, 1.4140000343322754, 1.4110000133514404, 1.399999976158142, 1.4160000085830688, 1.402999997138977, 1.4049999713897705, 1.4079999923706055, 1.4119999408721924, 1.4079999923706055, 1.409999966621399, 1.4079999923706055, 1.4129999876022339, 1.4160000085830688, 1.4149999618530273, 1.4210000038146973, 1.4229999780654907, 1.4229999780654907, 1.4279999732971191, 1.4240000247955322, 1.4259999990463257, 1.4220000505447388, 1.4190000295639038, 1.434000015258789, 1.434000015258789, 1.437000036239624, 1.434999942779541, 1.4329999685287476, 1.4259999990463257, 1.4320000410079956, 1.4299999475479126, 1.4199999570846558, 1.4229999780654907, 1.4290000200271606, inf, inf, 1.184000015258789, 1.1770000457763672, 1.1720000505447388, 1.1759999990463257, 1.1740000247955322, 1.1699999570846558, 1.1799999475479126, 1.180999994277954, 1.1829999685287476, inf, inf, 1.3919999599456787, 1.3760000467300415, 1.3969999551773071, 1.4110000133514404, 1.4149999618530273, 1.409999966621399, 1.4249999523162842, 1.4179999828338623, 1.4190000295639038, 1.4160000085830688, 1.4190000295639038, 1.4079999923706055, 1.409000039100647, 1.4019999504089355, 1.4129999876022339, 1.406000018119812, 1.4010000228881836, 1.4110000133514404, 1.4160000085830688, 1.4249999523162842, 1.4320000410079956, 1.4579999446868896, inf, inf, 1.6649999618530273, inf, 1.6130000352859497, 1.6089999675750732, 1.6080000400543213, 1.5950000286102295, 1.5920000076293945, 1.593999981880188, 1.5889999866485596, 1.5720000267028809, inf, inf, 1.4149999618530273, inf, 1.3539999723434448, 1.347000002861023, 1.3359999656677246, 1.340999960899353, 1.3320000171661377, 1.3270000219345093, 1.3300000429153442, 1.3270000219345093, 1.3270000219345093, 1.3289999961853027, 1.3270000219345093, 1.3209999799728394, 1.3309999704360962, 1.3279999494552612, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 2.138000011444092, 2.134000062942505, 2.1470000743865967, 2.1640000343322754, 2.174999952316284, 2.181999921798706, 2.2019999027252197, inf, 2.2829999923706055, 2.2850000858306885, 2.299999952316284, inf, inf, 2.7939999103546143, 2.7890000343322754, 2.7750000953674316, 2.7799999713897705, 2.7790000438690186, 2.765000104904175, 2.7639999389648438, 2.753000020980835, 2.759000062942505, 2.75, 2.742000102996826, 2.73799991607666, 2.744999885559082, 2.7639999389648438, inf, 2.3340001106262207, 2.3329999446868896, inf, 2.4619998931884766, 2.4489998817443848, 2.421999931335449, 2.4210000038146973, 2.4030001163482666, 2.4000000953674316, 2.3919999599456787, 2.384000062942505, 2.3910000324249268, 2.3910000324249268, 2.380000114440918, inf, inf, inf, 0.30399999022483826, 0.2930000126361847, 0.29100000858306885, 0.2720000147819519, 0.27799999713897705, 0.2930000126361847, 0.2720000147819519, 0.2800000011920929, 0.28999999165534973, 0.28999999165534973, 0.2759999930858612, 0.27900001406669617, 0.289000004529953, 0.27799999713897705, 0.28700000047683716, 0.27399998903274536, 0.2720000147819519, 0.26600000262260437, 0.27399998903274536, 0.2619999945163727, 0.2809999883174896, 0.27399998903274536, 0.27300000190734863, 0.2669999897480011, 0.2680000066757202, 0.26899999380111694, 0.2639999985694885, 0.2619999945163727, 0.26899999380111694, 0.25999999046325684, 0.2669999897480011, 0.2549999952316284, 0.2709999978542328, 0.25200000405311584, 0.2619999945163727, 0.2590000033378601, 0.2669999897480011, 0.25, 0.24799999594688416, 0.2540000081062317, 0.2540000081062317, 0.2540000081062317, 0.25600001215934753, 0.2590000033378601, 0.2590000033378601, 0.25200000405311584, 0.24500000476837158, 0.25, 0.25200000405311584, 0.2460000067949295, 0.25099998712539673, inf, inf]

# 根据激光雷达数据的长度，将角度均匀分布在 [0, 2π] 范围内
angles = np.linspace(0, 2 * np.pi, len(laser_data))

# 根据激光雷达数据和均匀分布的角度，计算 X 和 Y 坐标
X = np.array(laser_data) * np.cos(angles)
Y = np.array(laser_data) * np.sin(angles)

# 筛选 laser_data 中小于 1000 的有效数据
mask_valid = (np.array(laser_data) < limit) & np.isfinite(laser_data)
X_valid = X[mask_valid]
Y_valid = Y[mask_valid]

# 组合为二维点坐标数组
points = np.vstack((X_valid, Y_valid)).T

# 使用DBSCAN聚类算法对点云进行分簇
db = DBSCAN(eps=0.1, min_samples=20).fit(points)
labels = db.labels_

# 找出簇的数量 (排除噪声点)
n_clusters = len(set(labels)) - (1 if -1 in labels else 0)


# 圆拟合函数
def fit_circle(x, y):
    A = np.vstack([x, y, np.ones(len(x))]).T
    b = x ** 2 + y ** 2
    c = np.linalg.lstsq(A, b, rcond=None)[0]
    center_x = c[0] / 2
    center_y = c[1] / 2
    radius = np.sqrt(c[2] + center_x ** 2 + center_y ** 2)
    return center_x, center_y, radius


# 创建绘图
plt.figure()

# 为每个簇生成不同的颜色
colors = plt.cm.tab10(np.linspace(0, 1, n_clusters))

# 对每个簇分别拟合圆弧并绘制
for cluster_idx in range(n_clusters):
    # 提取当前簇的点
    mask = (labels == cluster_idx)
    X_cluster = X_valid[mask]
    Y_cluster = Y_valid[mask]

    # 对簇进行圆拟合
    center_x, center_y, radius = fit_circle(X_cluster, Y_cluster)

    # 生成圆弧拟合的点用于绘图
    theta_fit = np.linspace(0, 2 * np.pi, 100)
    X_fit = center_x + radius * np.cos(theta_fit)
    Y_fit = center_y + radius * np.sin(theta_fit)

    # 绘制圆弧拟合 (虚线)
    plt.plot(X_fit, Y_fit, color=colors[cluster_idx], linestyle='--', label=f'Fitted Circle {cluster_idx + 1}')

    # 绘制当前簇的点云
    plt.scatter(X_cluster, Y_cluster, color=colors[cluster_idx], s=1, label=f'Cluster {cluster_idx + 1}')

    # 输出极坐标信息
    r = np.sqrt(center_x ** 2 + center_y ** 2)
    phi = np.arctan2(center_y, center_x)
    print(f"Cluster {cluster_idx} - Center: (r={r:.4f}, phi={phi:.4f})")

# 输出r最小的一个圆的信息
print()

# 图形细节
plt.gca().set_aspect('equal', adjustable='box')  # 确保比例尺相同
plt.title('Laser Scan Point Cloud with Multiple Circle Fitting')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend(bbox_to_anchor=(0, 0), loc='upper center')
plt.show()
